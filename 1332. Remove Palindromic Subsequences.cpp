/*  You are given a string s consisting only of letters 'a' and 'b'. In a single step you can remove one palindromic subsequence from s.
    Return the minimum number of steps to make the given string empty.
    A string is a subsequence of a given string if it is generated by deleting some characters of a given string without changing its order. Note that a subsequence
    does not necessarily need to be contiguous.
    A string is called palindrome if is one that reads the same backward as well as forward.

            Example 1:
                  Input: s = "ababa"
                  Output: 1
                  Explanation: s is already a palindrome, so its entirety can be removed in a single step.

            Example 2:
                  Input: s = "abb"
                  Output: 2
                  Explanation: "abb" -> "bb" -> "". 
                  Remove palindromic subsequence "a" then "bb".

            Example 3:
                  Input: s = "baabb"
                  Output: 2
                  Explanation: "baabb" -> "b" -> "". 
                  Remove palindromic subsequence "baab" then "b".
*/




/* The trick in the Question is to realize that the string can only contain 'a' and 'b'. 
   If the string is a palindrome, you can straightaway remove it which takes only 1 step.
   If it is not palindrome, then club all A's together into one palindrome, and all Bs together in another. Then remove both the palindromes one by one which
   take 2 steps. 
*/

class Solution {
public:
    int removePalindromeSub(string s)
    {
        if(s.size() == 0) 
            return 0;
        
        string str = s;
        
        reverse(str.begin(),str.end());
        
        if(s == str)        // if string is fully palindromic
            return 1;
        
        return 2;
    }
};




